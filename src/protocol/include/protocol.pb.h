// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/protocol.proto

#ifndef PROTOBUF_include_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_include_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Tracer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_include_2fprotocol_2eproto();
void protobuf_InitDefaults_include_2fprotocol_2eproto();
void protobuf_AssignDesc_include_2fprotocol_2eproto();
void protobuf_ShutdownFile_include_2fprotocol_2eproto();

class STracingInterval;

// ===================================================================

class STracingInterval
    : public ::google::protobuf::
          Message /* @@protoc_insertion_point(class_definition:Tracer.STracingInterval) */ {
 public:
  STracingInterval();
  virtual ~STracingInterval();

  STracingInterval(const STracingInterval& from);

  inline STracingInterval& operator=(const STracingInterval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STracingInterval& default_instance();

  static const STracingInterval* internal_default_instance();

  void Swap(STracingInterval* other);

  // implements Message ----------------------------------------------

  inline STracingInterval* New() const { return New(NULL); }

  STracingInterval* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STracingInterval& from);
  void MergeFrom(const STracingInterval& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(STracingInterval* other);
  void UnsafeMergeFrom(const STracingInterval& from);

 private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tid = 1;
  bool has_tid() const;
  void clear_tid();
  static const int kTidFieldNumber = 1;
  ::google::protobuf::int32 tid() const;
  void set_tid(::google::protobuf::int32 value);

  // required int64 begin = 2;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 2;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // required int64 end = 3;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // required string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string category = 5;
  bool has_category() const;
  void clear_category();
  static const int kCategoryFieldNumber = 5;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // required int32 module = 6;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 6;
  ::google::protobuf::int32 module() const;
  void set_module(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Tracer.STracingInterval)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_module();
  inline void clear_has_module();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 module_;
  friend void protobuf_InitDefaults_include_2fprotocol_2eproto_impl();
  friend void protobuf_AddDesc_include_2fprotocol_2eproto_impl();
  friend void protobuf_AssignDesc_include_2fprotocol_2eproto();
  friend void protobuf_ShutdownFile_include_2fprotocol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<STracingInterval>
    STracingInterval_default_instance_;

// ===================================================================

// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// STracingInterval

// required int32 tid = 1;
inline bool STracingInterval::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STracingInterval::set_has_tid() { _has_bits_[0] |= 0x00000001u; }
inline void STracingInterval::clear_has_tid() { _has_bits_[0] &= ~0x00000001u; }
inline void STracingInterval::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 STracingInterval::tid() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.tid)
  return tid_;
}
inline void STracingInterval::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.tid)
}

// required int64 begin = 2;
inline bool STracingInterval::has_begin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STracingInterval::set_has_begin() { _has_bits_[0] |= 0x00000002u; }
inline void STracingInterval::clear_has_begin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STracingInterval::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 STracingInterval::begin() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.begin)
  return begin_;
}
inline void STracingInterval::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.begin)
}

// required int64 end = 3;
inline bool STracingInterval::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void STracingInterval::set_has_end() { _has_bits_[0] |= 0x00000004u; }
inline void STracingInterval::clear_has_end() { _has_bits_[0] &= ~0x00000004u; }
inline void STracingInterval::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 STracingInterval::end() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.end)
  return end_;
}
inline void STracingInterval::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.end)
}

// required string name = 4;
inline bool STracingInterval::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void STracingInterval::set_has_name() { _has_bits_[0] |= 0x00000008u; }
inline void STracingInterval::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void STracingInterval::clear_name() {
  name_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& STracingInterval::name() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.name)
  return name_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STracingInterval::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   value);
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.name)
}
inline void STracingInterval::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tracer.STracingInterval.name)
}
inline void STracingInterval::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tracer.STracingInterval.name)
}
inline ::std::string* STracingInterval::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Tracer.STracingInterval.name)
  return name_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STracingInterval::release_name() {
  // @@protoc_insertion_point(field_release:Tracer.STracingInterval.name)
  clear_has_name();
  return name_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STracingInterval::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tracer.STracingInterval.name)
}

// required string category = 5;
inline bool STracingInterval::has_category() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void STracingInterval::set_has_category() {
  _has_bits_[0] |= 0x00000010u;
}
inline void STracingInterval::clear_has_category() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void STracingInterval::clear_category() {
  category_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
inline const ::std::string& STracingInterval::category() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.category)
  return category_.GetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STracingInterval::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.category)
}
inline void STracingInterval::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tracer.STracingInterval.category)
}
inline void STracingInterval::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tracer.STracingInterval.category)
}
inline ::std::string* STracingInterval::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:Tracer.STracingInterval.category)
  return category_.MutableNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STracingInterval::release_category() {
  // @@protoc_insertion_point(field_release:Tracer.STracingInterval.category)
  clear_has_category();
  return category_.ReleaseNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STracingInterval::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:Tracer.STracingInterval.category)
}

// required int32 module = 6;
inline bool STracingInterval::has_module() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void STracingInterval::set_has_module() { _has_bits_[0] |= 0x00000020u; }
inline void STracingInterval::clear_has_module() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void STracingInterval::clear_module() {
  module_ = 0;
  clear_has_module();
}
inline ::google::protobuf::int32 STracingInterval::module() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.module)
  return module_;
}
inline void STracingInterval::set_module(::google::protobuf::int32 value) {
  set_has_module();
  module_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.module)
}

inline const STracingInterval* STracingInterval::internal_default_instance() {
  return &STracingInterval_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tracer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_include_2fprotocol_2eproto__INCLUDED
