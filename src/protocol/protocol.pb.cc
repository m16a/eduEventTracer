// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tracer {

namespace {

const ::google::protobuf::Descriptor* STracingInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STracingInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* STracingLegend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STracingLegend_reflection_ = NULL;
const ::google::protobuf::Descriptor* STracingLegend_MapTidToNameEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_include_2fprotocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_include_2fprotocol_2eproto() {
  protobuf_AddDesc_include_2fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "include/protocol.proto");
  GOOGLE_CHECK(file != NULL);
  STracingInterval_descriptor_ = file->message_type(0);
  static const int STracingInterval_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, module_),
  };
  STracingInterval_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STracingInterval_descriptor_,
      STracingInterval::internal_default_instance(),
      STracingInterval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, _has_bits_),
      -1,
      -1,
      sizeof(STracingInterval),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingInterval, _internal_metadata_));
  STracingLegend_descriptor_ = file->message_type(1);
  static const int STracingLegend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingLegend, maptidtoname_),
  };
  STracingLegend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      STracingLegend_descriptor_,
      STracingLegend::internal_default_instance(),
      STracingLegend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingLegend, _has_bits_),
      -1,
      -1,
      sizeof(STracingLegend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STracingLegend, _internal_metadata_));
  STracingLegend_MapTidToNameEntry_descriptor_ = STracingLegend_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_include_2fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STracingInterval_descriptor_, STracingInterval::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      STracingLegend_descriptor_, STracingLegend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        STracingLegend_MapTidToNameEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                STracingLegend_MapTidToNameEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_include_2fprotocol_2eproto() {
  STracingInterval_default_instance_.Shutdown();
  delete STracingInterval_reflection_;
  STracingLegend_default_instance_.Shutdown();
  delete STracingLegend_reflection_;
}

void protobuf_InitDefaults_include_2fprotocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  STracingInterval_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  STracingLegend_default_instance_.DefaultConstruct();
  STracingInterval_default_instance_.get_mutable()->InitAsDefaultInstance();
  STracingLegend_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_include_2fprotocol_2eproto_once_);
void protobuf_InitDefaults_include_2fprotocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_include_2fprotocol_2eproto_once_,
                 &protobuf_InitDefaults_include_2fprotocol_2eproto_impl);
}
void protobuf_AddDesc_include_2fprotocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_include_2fprotocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026include/protocol.proto\022\006Tracer\"k\n\020STra"
    "cingInterval\022\013\n\003tid\030\001 \002(\005\022\r\n\005begin\030\002 \002(\003"
    "\022\013\n\003end\030\003 \002(\003\022\014\n\004name\030\004 \002(\t\022\020\n\010category\030"
    "\005 \002(\t\022\016\n\006module\030\006 \002(\005\"\205\001\n\016STracingLegend"
    "\022>\n\014mapTidToName\030\001 \003(\0132(.Tracer.STracing"
    "Legend.MapTidToNameEntry\0323\n\021MapTidToName"
    "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001", 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "include/protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_include_2fprotocol_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_include_2fprotocol_2eproto_once_);
void protobuf_AddDesc_include_2fprotocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_include_2fprotocol_2eproto_once_,
                 &protobuf_AddDesc_include_2fprotocol_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_include_2fprotocol_2eproto {
  StaticDescriptorInitializer_include_2fprotocol_2eproto() {
    protobuf_AddDesc_include_2fprotocol_2eproto();
  }
} static_descriptor_initializer_include_2fprotocol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STracingInterval::kTidFieldNumber;
const int STracingInterval::kBeginFieldNumber;
const int STracingInterval::kEndFieldNumber;
const int STracingInterval::kNameFieldNumber;
const int STracingInterval::kCategoryFieldNumber;
const int STracingInterval::kModuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STracingInterval::STracingInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_include_2fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tracer.STracingInterval)
}

void STracingInterval::InitAsDefaultInstance() {
}

STracingInterval::STracingInterval(const STracingInterval& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tracer.STracingInterval)
}

void STracingInterval::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&begin_, 0, reinterpret_cast<char*>(&module_) -
    reinterpret_cast<char*>(&begin_) + sizeof(module_));
}

STracingInterval::~STracingInterval() {
  // @@protoc_insertion_point(destructor:Tracer.STracingInterval)
  SharedDtor();
}

void STracingInterval::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void STracingInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STracingInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STracingInterval_descriptor_;
}

const STracingInterval& STracingInterval::default_instance() {
  protobuf_InitDefaults_include_2fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<STracingInterval> STracingInterval_default_instance_;

STracingInterval* STracingInterval::New(::google::protobuf::Arena* arena) const {
  STracingInterval* n = new STracingInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STracingInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:Tracer.STracingInterval)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(STracingInterval, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<STracingInterval*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(begin_, module_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_category()) {
      category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STracingInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tracer.STracingInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (tag == 8) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin;
        break;
      }

      // required int64 begin = 2;
      case 2: {
        if (tag == 16) {
         parse_begin:
          set_has_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required int64 end = 3;
      case 3: {
        if (tag == 24) {
         parse_end:
          set_has_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tracer.STracingInterval.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_category;
        break;
      }

      // required string category = 5;
      case 5: {
        if (tag == 42) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tracer.STracingInterval.category");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_module;
        break;
      }

      // required int32 module = 6;
      case 6: {
        if (tag == 48) {
         parse_module:
          set_has_module();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tracer.STracingInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tracer.STracingInterval)
  return false;
#undef DO_
}

void STracingInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tracer.STracingInterval)
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // required int64 begin = 2;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin(), output);
  }

  // required int64 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->end(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tracer.STracingInterval.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required string category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tracer.STracingInterval.category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->category(), output);
  }

  // required int32 module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->module(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tracer.STracingInterval)
}

::google::protobuf::uint8* STracingInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Tracer.STracingInterval)
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // required int64 begin = 2;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begin(), target);
  }

  // required int64 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->end(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tracer.STracingInterval.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Tracer.STracingInterval.category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->category(), target);
  }

  // required int32 module = 6;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->module(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tracer.STracingInterval)
  return target;
}

size_t STracingInterval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Tracer.STracingInterval)
  size_t total_size = 0;

  if (has_tid()) {
    // required int32 tid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  if (has_begin()) {
    // required int64 begin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }

  if (has_end()) {
    // required int64 end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  if (has_name()) {
    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_category()) {
    // required string category = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());
  }

  if (has_module()) {
    // required int32 module = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->module());
  }

  return total_size;
}
size_t STracingInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tracer.STracingInterval)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 tid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());

    // required int64 begin = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());

    // required int64 end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());

    // required string name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string category = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->category());

    // required int32 module = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->module());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STracingInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tracer.STracingInterval)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const STracingInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STracingInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tracer.STracingInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tracer.STracingInterval)
    UnsafeMergeFrom(*source);
  }
}

void STracingInterval::MergeFrom(const STracingInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tracer.STracingInterval)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void STracingInterval::UnsafeMergeFrom(const STracingInterval& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_category()) {
      set_has_category();
      category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.category_);
    }
    if (from.has_module()) {
      set_module(from.module());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void STracingInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tracer.STracingInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STracingInterval::CopyFrom(const STracingInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tracer.STracingInterval)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool STracingInterval::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void STracingInterval::Swap(STracingInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STracingInterval::InternalSwap(STracingInterval* other) {
  std::swap(tid_, other->tid_);
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  name_.Swap(&other->name_);
  category_.Swap(&other->category_);
  std::swap(module_, other->module_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STracingInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STracingInterval_descriptor_;
  metadata.reflection = STracingInterval_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STracingInterval

// required int32 tid = 1;
bool STracingInterval::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void STracingInterval::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
void STracingInterval::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
void STracingInterval::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
::google::protobuf::int32 STracingInterval::tid() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.tid)
  return tid_;
}
void STracingInterval::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.tid)
}

// required int64 begin = 2;
bool STracingInterval::has_begin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void STracingInterval::set_has_begin() {
  _has_bits_[0] |= 0x00000002u;
}
void STracingInterval::clear_has_begin() {
  _has_bits_[0] &= ~0x00000002u;
}
void STracingInterval::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
::google::protobuf::int64 STracingInterval::begin() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.begin)
  return begin_;
}
void STracingInterval::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.begin)
}

// required int64 end = 3;
bool STracingInterval::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void STracingInterval::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
void STracingInterval::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void STracingInterval::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
::google::protobuf::int64 STracingInterval::end() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.end)
  return end_;
}
void STracingInterval::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.end)
}

// required string name = 4;
bool STracingInterval::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void STracingInterval::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void STracingInterval::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void STracingInterval::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& STracingInterval::name() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STracingInterval::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.name)
}
void STracingInterval::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tracer.STracingInterval.name)
}
void STracingInterval::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tracer.STracingInterval.name)
}
::std::string* STracingInterval::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Tracer.STracingInterval.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* STracingInterval::release_name() {
  // @@protoc_insertion_point(field_release:Tracer.STracingInterval.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STracingInterval::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Tracer.STracingInterval.name)
}

// required string category = 5;
bool STracingInterval::has_category() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void STracingInterval::set_has_category() {
  _has_bits_[0] |= 0x00000010u;
}
void STracingInterval::clear_has_category() {
  _has_bits_[0] &= ~0x00000010u;
}
void STracingInterval::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_category();
}
const ::std::string& STracingInterval::category() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.category)
  return category_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STracingInterval::set_category(const ::std::string& value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.category)
}
void STracingInterval::set_category(const char* value) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Tracer.STracingInterval.category)
}
void STracingInterval::set_category(const char* value, size_t size) {
  set_has_category();
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Tracer.STracingInterval.category)
}
::std::string* STracingInterval::mutable_category() {
  set_has_category();
  // @@protoc_insertion_point(field_mutable:Tracer.STracingInterval.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* STracingInterval::release_category() {
  // @@protoc_insertion_point(field_release:Tracer.STracingInterval.category)
  clear_has_category();
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void STracingInterval::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    set_has_category();
  } else {
    clear_has_category();
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:Tracer.STracingInterval.category)
}

// required int32 module = 6;
bool STracingInterval::has_module() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void STracingInterval::set_has_module() {
  _has_bits_[0] |= 0x00000020u;
}
void STracingInterval::clear_has_module() {
  _has_bits_[0] &= ~0x00000020u;
}
void STracingInterval::clear_module() {
  module_ = 0;
  clear_has_module();
}
::google::protobuf::int32 STracingInterval::module() const {
  // @@protoc_insertion_point(field_get:Tracer.STracingInterval.module)
  return module_;
}
void STracingInterval::set_module(::google::protobuf::int32 value) {
  set_has_module();
  module_ = value;
  // @@protoc_insertion_point(field_set:Tracer.STracingInterval.module)
}

inline const STracingInterval* STracingInterval::internal_default_instance() {
  return &STracingInterval_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STracingLegend::kMapTidToNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STracingLegend::STracingLegend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_include_2fprotocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tracer.STracingLegend)
}

void STracingLegend::InitAsDefaultInstance() {
}

STracingLegend::STracingLegend(const STracingLegend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tracer.STracingLegend)
}

void STracingLegend::SharedCtor() {
  _cached_size_ = 0;
  maptidtoname_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  maptidtoname_.SetEntryDescriptor(
      &::Tracer::STracingLegend_MapTidToNameEntry_descriptor_);
}

STracingLegend::~STracingLegend() {
  // @@protoc_insertion_point(destructor:Tracer.STracingLegend)
  SharedDtor();
}

void STracingLegend::SharedDtor() {
}

void STracingLegend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STracingLegend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STracingLegend_descriptor_;
}

const STracingLegend& STracingLegend::default_instance() {
  protobuf_InitDefaults_include_2fprotocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<STracingLegend> STracingLegend_default_instance_;

STracingLegend* STracingLegend::New(::google::protobuf::Arena* arena) const {
  STracingLegend* n = new STracingLegend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STracingLegend::Clear() {
// @@protoc_insertion_point(message_clear_start:Tracer.STracingLegend)
  maptidtoname_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool STracingLegend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tracer.STracingLegend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, string> mapTidToName = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mapTidToName:
          STracingLegend_MapTidToNameEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&maptidtoname_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), parser.value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Tracer.STracingLegend.MapTidToNameEntry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mapTidToName;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tracer.STracingLegend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tracer.STracingLegend)
  return false;
#undef DO_
}

void STracingLegend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tracer.STracingLegend)
  // map<int32, string> mapTidToName = 1;
  if (!this->maptidtoname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "Tracer.STracingLegend.MapTidToNameEntry.value");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->maptidtoname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->maptidtoname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->maptidtoname().begin();
          it != this->maptidtoname().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<STracingLegend_MapTidToNameEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maptidtoname_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<STracingLegend_MapTidToNameEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->maptidtoname().begin();
          it != this->maptidtoname().end(); ++it) {
        entry.reset(maptidtoname_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tracer.STracingLegend)
}

::google::protobuf::uint8* STracingLegend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Tracer.STracingLegend)
  // map<int32, string> mapTidToName = 1;
  if (!this->maptidtoname().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), p->second.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "Tracer.STracingLegend.MapTidToNameEntry.value");
      }
    };

    if (deterministic &&
        this->maptidtoname().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->maptidtoname().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->maptidtoname().begin();
          it != this->maptidtoname().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<STracingLegend_MapTidToNameEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maptidtoname_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i].second);
      }
    } else {
      ::google::protobuf::scoped_ptr<STracingLegend_MapTidToNameEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->maptidtoname().begin();
          it != this->maptidtoname().end(); ++it) {
        entry.reset(maptidtoname_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tracer.STracingLegend)
  return target;
}

size_t STracingLegend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tracer.STracingLegend)
  size_t total_size = 0;

  // map<int32, string> mapTidToName = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->maptidtoname_size());
  {
    ::google::protobuf::scoped_ptr<STracingLegend_MapTidToNameEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->maptidtoname().begin();
        it != this->maptidtoname().end(); ++it) {
      entry.reset(maptidtoname_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STracingLegend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tracer.STracingLegend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const STracingLegend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STracingLegend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tracer.STracingLegend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tracer.STracingLegend)
    UnsafeMergeFrom(*source);
  }
}

void STracingLegend::MergeFrom(const STracingLegend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tracer.STracingLegend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void STracingLegend::UnsafeMergeFrom(const STracingLegend& from) {
  GOOGLE_DCHECK(&from != this);
  maptidtoname_.MergeFrom(from.maptidtoname_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void STracingLegend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tracer.STracingLegend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STracingLegend::CopyFrom(const STracingLegend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tracer.STracingLegend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool STracingLegend::IsInitialized() const {

  return true;
}

void STracingLegend::Swap(STracingLegend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STracingLegend::InternalSwap(STracingLegend* other) {
  maptidtoname_.Swap(&other->maptidtoname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STracingLegend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STracingLegend_descriptor_;
  metadata.reflection = STracingLegend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// STracingLegend

// map<int32, string> mapTidToName = 1;
int STracingLegend::maptidtoname_size() const {
  return maptidtoname_.size();
}
void STracingLegend::clear_maptidtoname() {
  maptidtoname_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
STracingLegend::maptidtoname() const {
  // @@protoc_insertion_point(field_map:Tracer.STracingLegend.mapTidToName)
  return maptidtoname_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
STracingLegend::mutable_maptidtoname() {
  // @@protoc_insertion_point(field_mutable_map:Tracer.STracingLegend.mapTidToName)
  return maptidtoname_.MutableMap();
}

inline const STracingLegend* STracingLegend::internal_default_instance() {
  return &STracingLegend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tracer

// @@protoc_insertion_point(global_scope)
