

## Widgets #
> Basic
    Button
    [x] checkbox
    (x) radio a ( ) radio b ( ) radio c
    Click Click Click Click Click Click Click
    0
    Hover over me - or me 
    --------------------------------
    Value label
    AAAA combo (?)
    Hello, world! input text (?)
    123 - + input int
    (?)
    0.001 - + input float
    999999.05000001 - + input double
    1.000000e+10 input scientific (?)
    0.100 0.200 0.300 input float3
    50 drag int (?)
    42% drag int 0..100
    1.000 drag float
    0.006700 ns drag small float
    -1 slider int (?)
    ratio = 0.123 slider float
    0.0000 slider float (curve)
    0 deg slider angle
    R:255 G:  0 B: 51 color 1
    (?)
    R:102 G:179 B:  0 A:128 color 2
    listbox
    (single select)
> Trees
    > Basic trees
        > Child 0
        > Child 1
        > Child 2
        > Child 3
        > Child 4
    > Advanced, with Selectable nodes
        (?)
        [ ] Align label with current X position)
        Hello!
        > Selectable Node 0
        > Selectable Node 1
        > Selectable Node 2
        > Selectable Leaf 3
        > Selectable Leaf 4
        > Selectable Leaf 5
> Collapsing Headers
    [x] Enable extra group
    
    ## Header #
    
    ## Header with a close button #
> Bullets
    Bullet point 1
    Bullet point 2
    On multiple lines
    Bullet point 3 (two calls)
    Button
> Text
    > Colored Text
        Pink
        Yellow
        Disabled (?)
    > Word Wrapping
        This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.
        200 Wrap width
        Test paragraph 1:
        The lazy dog is a good dog. This paragraph is made to fit within 200 pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.
        Test paragraph 2:
        aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh
    > UTF-8 Text
        CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->LoadFromFileTTF() manually to load extra character ranges. Read misc/fonts/README.txt for details.
        Hiragana: かきくけこ (kakikukeko)
        Kanjis: 日本語 (nihongo)
        日本語 UTF-8 input
> Images
    Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!
    512x64
    And now some textured buttons..
    Pressed 0 times.
> Combo
    [ ] ImGuiComboFlags_PopupAlignLeft
    [ ] ImGuiComboFlags_NoArrowButton
    [ ] ImGuiComboFlags_NoPreview
    AAAA combo 1
    aaaa combo 2 (one-liner)
    combo 3 (array)
    AAAA combo 4 (function)
> Selectables
    > Basic
        1. I am selectable
        2. I am selectable
        3. I am not selectable
        4. I am selectable
        5. I am double clickable
    > Selection State: Single Selection
        Object 0
        Object 1
        Object 2
        Object 3
        Object 4
    > Selection State: Multiple Selection
        (?)
        Object 0
        Object 1
        Object 2
        Object 3
        Object 4
    > Rendering more text into the same line
        main.c  2,345 bytes
        Hello.cpp 12,345 bytes
        Hello.h  2,345 bytes
    > In columns
        Item 0 Item 1 Item 2
        Item 3 Item 4 Item 5
        Item 6 Item 7 Item 8
        Item 9 Item 10 Item 11
        Item 12 Item 13 Item 14
        Item 15
    > Grid
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
> Filtered Text Input default decimal hexadecimal uppercase no blank "imgui" letters
    Password input
    password (?)
    password123 password (clear)
> Multi-line Text Input
    [ ] Read-only
> Plots Widgets
    [x] Animate
    Frame Times
    avg 0.0 Lines
    Histogram 
    --------------------------------
    Sin func 70 Sample count
    Lines
    Histogram 
    --------------------------------
    1% Progress Bar
    9/1753
> Color/Picker Widgets
    [x] With Alpha Preview
    [ ] With Half Alpha Preview
    [x] With Drag and Drop
    [x] With Options Menu (?)
    [ ] With HDR (?)
    Color widget: (?)
    R:114 G:144 B:154 MyColor
    Color widget HSV with Alpha:
    H:138 S: 66 V:154 A:200 MyColor
    Color widget with Float Display:
    R:0.447 G:0.565 B:0.604 A:0.784 MyColor
    Color button with Picker: (?)
    Color button with Custom Picker Popup:
    Palette
    Color button only:
    Color picker:
    [x] With Alpha
    [x] With Alpha Bar
    [x] With Side Preview [ ] With Ref Color
    RGB Input Inputs Mode
    Auto/Current Picker Mode (?)
    MyColor
    R:114 G:144 B:154 A:200
    Programmatically set defaults: (?)
    Default: Uint8 + HSV + Hue Bar
    Default: Float + HDR + Hue Wheel
> Range Widgets
    Min: 10.0 % Max: 90.0 % range
    Min: 100 units Max: 1000 units range int (no bounds)
> Data Types
    Drags:
    [ ] Clamp integers to 0..50 (?)
    -1 drag s32
    4294967295 ms drag u32
    -1 drag s64
    18446744073709551615 drag u64
    0.123000 drag float
    0.123000 drag float ^2 (?)
    90000.0123456789 grams drag double
    0 < 90000.0123456789 < 1 drag double ^2
    Sliders
    -1 slider s32 low
    -1 slider s32 high
    -1 slider s32 full
    4294967295 slider u32 low
    4294967295 slider u32 high
    4294967295 slider u32 full
                                                                  - slider s64 low
                                                                  - slider s64 high
                                                                  - slider s64 full
                                                          429496729 slider u64 low
                                                          429496729 slider u64 high
                                                          429496729 slider u64 full
    0.123000 slider float low
    0.1230000034 slider float low^2
    1.230000e-01 slider float high
    90000.0123456789 grams slider double low
    90000.0123456789 slider double low^2
    9.000001e+04 grams slider double high
    Inputs
    [x] Show step buttons
    -1 - + input s32
    FFFFFFFF - + input s32 hex
    4294967295 - + input u32
    FFFFFFFF - + input u32 hex
    -1 - + input s64
    18446744073709551615 - + input u64
    0.123000 - + input float
    90000.012346 - + input double
> Multi-component Widgets
    0.100 0.200 input float2
    0.100 0.200 drag float2
    0.100 0.200 slider float2
    1 5 input int2
    1 5 drag int2
    1 5 slider int2
    0.100 0.200 0.300 input float3
    0.100 0.200 0.300 drag float3
    0.100 0.200 0.300 slider float3
    1 5 100 input int3
    1 5 100 drag int3
    1 5 100 slider int3
    0.100 0.200 0.300 0.440 input float4
    0.100 0.200 0.300 0.440 drag float4
    0.100 0.200 0.300 0.440 slider float4
    1 5 100 255 input int4
    1 5 100 255 drag int4
    1 5 100 255 slider int4
> Vertical Sliders
    0
    0.00
    sec 0.60
    sec 0.35
    sec 0.90
    sec
> Active, Focused, Hovered & Focused Tests
    ( ) Text (x) Button ( ) CheckBox ( ) SliderFloat ( ) ColorEdit4 ( ) ListBox
    ITEM: Button
    Return value = 0
    IsItemFocused() = 0
    IsItemHovered() = 0
    IsItemHovered(_AllowWhenBlockedByPopup) = 0
    IsItemHovered(_AllowWhenBlockedByActiveItem) = 0
    IsItemHovered(_AllowWhenOverlapped) = 0
    IsItemHovered(_RectOnly) = 0
    IsItemActive() = 0
    IsItemDeactivated() = 0
    IsItemDeactivatedAfterChange() = 0
    IsItemVisible() = 0
    [ ] Embed everything inside a child window (for additional testing)
    IsWindowFocused() = 1
    IsWindowFocused(_ChildWindows) = 1
    IsWindowFocused(_ChildWindows|_RootWindow) = 1
    IsWindowFocused(_RootWindow) = 1
    IsWindowFocused(_AnyWindow) = 1
    IsWindowHovered() = 1
    IsWindowHovered(_AllowWhenBlockedByPopup) = 1
    IsWindowHovered(_AllowWhenBlockedByActiveItem) = 1
    IsWindowHovered(_ChildWindows) = 1
    IsWindowHovered(_ChildWindows|_RootWindow) = 1
    IsWindowHovered(_RootWindow) = 1
    IsWindowHovered(_AnyWindow) = 1

## Layout #
> Child regions
    [ ] Disable Mouse Wheel
    [ ] Disable Menu
    Goto 50
> Widgets Width
    PushItemWidth(100) (?)
    0.000 float
    PushItemWidth(GetWindowWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(GetContentRegionAvailWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(-100) (?)
    0.000 float
    PushItemWidth(-1) (?)
    0.000 float
> Basic Horizontal Layout
    (Use ImGui::SameLine() to keep adding items to the right of the preceding item)
    Two items: Hello Sailor
    More spacing: Hello Sailor
    Normal buttons Banana Apple Corniflower
    Small buttons Like this one can fit within a text block.
    Aligned x=150 x=300
    Aligned x=150 x=300
    [ ] My [ ] Tailor [ ] Is [ ] Rich
    Combo 1.000 X 2.000 Y 3.000 Z
    Lists:
    A B
> Groups
    (Using ImGui::BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.)
    AAA BBB
    CCC
    DDD
    EEE
    ACTION REACTION
    LEVERAGE
    BUZZWORD
    List
> Text Baseline Alignment
    (This is testing the vertical alignment that occurs on text to keep it at the same baseline as widgets. Lines only composed of text or "small" widgets fit in less vertical spaces than lines with normal widgets)
    One
    Two
    Three Hello
    World Banana
    Banana Hello
    World One
    Two
    Three
    HOP Banana Hello
    World Banana
    HOP Hello
    World Banana
    TEST TEST TEST
    Text aligned to Widget Widget Widget Widget Widget
    Button > Node
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    > Node Button
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    Button Bullet text
    Node Button
> Scrolling
    (Use SetScrollHere() or SetScrollFromPosY() to scroll to a given position.)
    [x] Track Line = 50
    Scroll To Pos Y = 200 px
    Top
    0/0
    25%
    0/0
    Center
    0/0
    75%
    0/0
    Bottom
    0/0
> Horizontal Scrolling
    Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.
    You may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().
    7 Lines
    << Scroll from code >> 0/0
> Clipping
    On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.
    100 100 size
    (Click and drag)

## Popups & Modal windows #

## Columns #

## Filtering #

## Inputs, Navigation & Focus #


## Widgets #
> Basic
    Button
    [x] checkbox
    (x) radio a ( ) radio b ( ) radio c
    Click Click Click Click Click Click Click
    0
    Hover over me - or me 
    --------------------------------
    Value label
    AAAA combo (?)
    Hello, world! input text (?)
    123 - + input int
    (?)
    0.001 - + input float
    999999.05000001 - + input double
    1.000000e+10 input scientific (?)
    0.100 0.200 0.300 input float3
    50 drag int (?)
    42% drag int 0..100
    1.000 drag float
    0.006700 ns drag small float
    -1 slider int (?)
    ratio = 0.123 slider float
    0.0000 slider float (curve)
    0 deg slider angle
    R:255 G:  0 B: 51 color 1
    (?)
    R:102 G:179 B:  0 A:128 color 2
    listbox
    (single select)
> Trees
    > Basic trees
        > Child 0
        > Child 1
        > Child 2
        > Child 3
        > Child 4
    > Advanced, with Selectable nodes
        (?)
        [ ] Align label with current X position)
        Hello!
        > Selectable Node 0
        > Selectable Node 1
        > Selectable Node 2
        > Selectable Leaf 3
        > Selectable Leaf 4
        > Selectable Leaf 5
> Collapsing Headers
    [x] Enable extra group
    
    ## Header #
    
    ## Header with a close button #
> Bullets
    Bullet point 1
    Bullet point 2
    On multiple lines
    Bullet point 3 (two calls)
    Button
> Text
    > Colored Text
        Pink
        Yellow
        Disabled (?)
    > Word Wrapping
        This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.
        200 Wrap width
        Test paragraph 1:
        The lazy dog is a good dog. This paragraph is made to fit within 200 pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.
        Test paragraph 2:
        aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh
    > UTF-8 Text
        CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->LoadFromFileTTF() manually to load extra character ranges. Read misc/fonts/README.txt for details.
        Hiragana: かきくけこ (kakikukeko)
        Kanjis: 日本語 (nihongo)
        日本語 UTF-8 input
> Images
    Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!
    512x64
    And now some textured buttons..
    Pressed 0 times.
> Combo
    [ ] ImGuiComboFlags_PopupAlignLeft
    [ ] ImGuiComboFlags_NoArrowButton
    [ ] ImGuiComboFlags_NoPreview
    AAAA combo 1
    aaaa combo 2 (one-liner)
    combo 3 (array)
    AAAA combo 4 (function)
> Selectables
    > Basic
        1. I am selectable
        2. I am selectable
        3. I am not selectable
        4. I am selectable
        5. I am double clickable
    > Selection State: Single Selection
        Object 0
        Object 1
        Object 2
        Object 3
        Object 4
    > Selection State: Multiple Selection
        (?)
        Object 0
        Object 1
        Object 2
        Object 3
        Object 4
    > Rendering more text into the same line
        main.c  2,345 bytes
        Hello.cpp 12,345 bytes
        Hello.h  2,345 bytes
    > In columns
        Item 0 Item 1 Item 2
        Item 3 Item 4 Item 5
        Item 6 Item 7 Item 8
        Item 9 Item 10 Item 11
        Item 12 Item 13 Item 14
        Item 15
    > Grid
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
        Sailor Sailor Sailor Sailor
> Filtered Text Input default decimal hexadecimal uppercase no blank "imgui" letters
    Password input
    password (?)
    password123 password (clear)
> Multi-line Text Input
    [ ] Read-only
> Plots Widgets
    [x] Animate
    Frame Times
    avg 0.0 Lines
    Histogram 
    --------------------------------
    Sin func 70 Sample count
    Lines
    Histogram 
    --------------------------------
    1% Progress Bar
    16/1753
> Color/Picker Widgets
    [x] With Alpha Preview
    [ ] With Half Alpha Preview
    [x] With Drag and Drop
    [x] With Options Menu (?)
    [ ] With HDR (?)
    Color widget: (?)
    R:114 G:144 B:154 MyColor
    Color widget HSV with Alpha:
    H:138 S: 66 V:154 A:200 MyColor
    Color widget with Float Display:
    R:0.447 G:0.565 B:0.604 A:0.784 MyColor
    Color button with Picker: (?)
    Color button with Custom Picker Popup:
    Palette
    Color button only:
    Color picker:
    [x] With Alpha
    [x] With Alpha Bar
    [x] With Side Preview [ ] With Ref Color
    RGB Input Inputs Mode
    Auto/Current Picker Mode (?)
    MyColor
    R:114 G:144 B:154 A:200
    Programmatically set defaults: (?)
    Default: Uint8 + HSV + Hue Bar
    Default: Float + HDR + Hue Wheel
> Range Widgets
    Min: 10.0 % Max: 90.0 % range
    Min: 100 units Max: 1000 units range int (no bounds)
> Data Types
    Drags:
    [ ] Clamp integers to 0..50 (?)
    -1 drag s32
    4294967295 ms drag u32
    -1 drag s64
    18446744073709551615 drag u64
    0.123000 drag float
    0.123000 drag float ^2 (?)
    90000.0123456789 grams drag double
    0 < 90000.0123456789 < 1 drag double ^2
    Sliders
    -1 slider s32 low
    -1 slider s32 high
    -1 slider s32 full
    4294967295 slider u32 low
    4294967295 slider u32 high
    4294967295 slider u32 full
                                                                  - slider s64 low
                                                                  - slider s64 high
                                                                  - slider s64 full
                                                          429496729 slider u64 low
                                                          429496729 slider u64 high
                                                          429496729 slider u64 full
    0.123000 slider float low
    0.1230000034 slider float low^2
    1.230000e-01 slider float high
    90000.0123456789 grams slider double low
    90000.0123456789 slider double low^2
    9.000001e+04 grams slider double high
    Inputs
    [x] Show step buttons
    -1 - + input s32
    FFFFFFFF - + input s32 hex
    4294967295 - + input u32
    FFFFFFFF - + input u32 hex
    -1 - + input s64
    18446744073709551615 - + input u64
    0.123000 - + input float
    90000.012346 - + input double
> Multi-component Widgets
    0.100 0.200 input float2
    0.100 0.200 drag float2
    0.100 0.200 slider float2
    1 5 input int2
    1 5 drag int2
    1 5 slider int2
    0.100 0.200 0.300 input float3
    0.100 0.200 0.300 drag float3
    0.100 0.200 0.300 slider float3
    1 5 100 input int3
    1 5 100 drag int3
    1 5 100 slider int3
    0.100 0.200 0.300 0.440 input float4
    0.100 0.200 0.300 0.440 drag float4
    0.100 0.200 0.300 0.440 slider float4
    1 5 100 255 input int4
    1 5 100 255 drag int4
    1 5 100 255 slider int4
> Vertical Sliders
    0
    0.00
    sec 0.60
    sec 0.35
    sec 0.90
    sec
> Active, Focused, Hovered & Focused Tests
    ( ) Text (x) Button ( ) CheckBox ( ) SliderFloat ( ) ColorEdit4 ( ) ListBox
    ITEM: Button
    Return value = 0
    IsItemFocused() = 0
    IsItemHovered() = 0
    IsItemHovered(_AllowWhenBlockedByPopup) = 0
    IsItemHovered(_AllowWhenBlockedByActiveItem) = 0
    IsItemHovered(_AllowWhenOverlapped) = 0
    IsItemHovered(_RectOnly) = 0
    IsItemActive() = 0
    IsItemDeactivated() = 0
    IsItemDeactivatedAfterChange() = 0
    IsItemVisible() = 0
    [ ] Embed everything inside a child window (for additional testing)
    IsWindowFocused() = 1
    IsWindowFocused(_ChildWindows) = 1
    IsWindowFocused(_ChildWindows|_RootWindow) = 1
    IsWindowFocused(_RootWindow) = 1
    IsWindowFocused(_AnyWindow) = 1
    IsWindowHovered() = 1
    IsWindowHovered(_AllowWhenBlockedByPopup) = 1
    IsWindowHovered(_AllowWhenBlockedByActiveItem) = 1
    IsWindowHovered(_ChildWindows) = 1
    IsWindowHovered(_ChildWindows|_RootWindow) = 1
    IsWindowHovered(_RootWindow) = 1
    IsWindowHovered(_AnyWindow) = 1

## Layout #
> Child regions
    [ ] Disable Mouse Wheel
    [ ] Disable Menu
    Goto 50
> Widgets Width
    PushItemWidth(100) (?)
    0.000 float
    PushItemWidth(GetWindowWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(GetContentRegionAvailWidth() * 0.5f) (?)
    0.000 float
    PushItemWidth(-100) (?)
    0.000 float
    PushItemWidth(-1) (?)
    0.000 float
> Basic Horizontal Layout
    (Use ImGui::SameLine() to keep adding items to the right of the preceding item)
    Two items: Hello Sailor
    More spacing: Hello Sailor
    Normal buttons Banana Apple Corniflower
    Small buttons Like this one can fit within a text block.
    Aligned x=150 x=300
    Aligned x=150 x=300
    [ ] My [ ] Tailor [ ] Is [ ] Rich
    Combo 1.000 X 2.000 Y 3.000 Z
    Lists:
    A B
> Groups
    (Using ImGui::BeginGroup()/EndGroup() to layout items. BeginGroup() basically locks the horizontal position. EndGroup() bundles the whole group so that you can use functions such as IsItemHovered() on it.)
    AAA BBB
    CCC
    DDD
    EEE
    ACTION REACTION
    LEVERAGE
    BUZZWORD
    List
> Text Baseline Alignment
    (This is testing the vertical alignment that occurs on text to keep it at the same baseline as widgets. Lines only composed of text or "small" widgets fit in less vertical spaces than lines with normal widgets)
    One
    Two
    Three Hello
    World Banana
    Banana Hello
    World One
    Two
    Three
    HOP Banana Hello
    World Banana
    HOP Hello
    World Banana
    TEST TEST TEST
    Text aligned to Widget Widget Widget Widget Widget
    Button > Node
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    > Node Button
        Item 0..
        Item 1..
        Item 2..
        Item 3..
        Item 4..
        Item 5..
    Button Bullet text
    Node Button
> Scrolling
    (Use SetScrollHere() or SetScrollFromPosY() to scroll to a given position.)
    [x] Track Line = 50
    Scroll To Pos Y = 200 px
    Top
    0/0
    25%
    0/0
    Center
    0/0
    75%
    0/0
    Bottom
    0/0
> Horizontal Scrolling
    Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.
    You may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().
    7 Lines
    << Scroll from code >> 0/0
> Clipping
    On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.
    100 100 size
    (Click and drag)

## Popups & Modal windows #

## Columns #

## Filtering #

## Inputs, Navigation & Focus #
